//intro

hi there

i was walking down memory lane the other day - in my head, i was actually working at a coffee show -
and as i finishing cleaning up some project documentation and i ended up remembering something.


back in one of my previous lives,
when i used to work for the igem foundation
and was responsable for mainting websites,
i had to teach myself how to code.

while i wouldnt call myself an engineer, i do consider myself a very technical designer
and i am pretty used to designing and implementing websites.
once i started creating them i got hooked.  the more i did it, the more i wanted to do it,
i started with html and css and ended learning javascript and jquery.


redoing my portfolio website has awaken that coding itch again
and while i keep polishing my front-end skills i wanted to go back and check a litte
project i did a few years ago. ready to look into some old javascript?


let's review this through a STAR lense
meaning -> situation, task, actions and results

pro tip: this is a super useful structure whenever you are talking about your projects
- ask a PM friend for help to refine your story :)


1) situation
In 2020 a lot of things had to suddenly become remote - you know why, there is no need to repeat it.
for igem it was the same, the event that was supposed to take place in the hynes convntion center
and bring together more than 300 students from all over the world had to pivot quickly to a fully remote experience.

the team hurried to reorganize in person presentations, workshops and panels into an online agenda. this situation however opened a new opportunity, since our adience would be tuning in from al over the world now we had more hours of the day to connect over synbio.
great! now our attendees had a richer agenda to choose from.
the only problem was now making that schedule easy to browse and navigate for our all our participants regardless of time zone.
good luck to me i thought.


2) tasks

as the sole designer i was in charge of the visuals and websites so it landed on my plate to solve this little problem. i set a aside a few days to specifically work on it.

i started with research ,i knew  that ideally we needed  a quick solution we could have directly on our platform.

back then i looked at different tools just to make sure i wasnt reinventing the wheel. there were several paid offers we could connect to but we needed something low cost and tailored to our specific needs. we need something flexible we could update on the day of without any issues. it was time to code.

i alrready had styled the css and implemented our sites on media wiki and done some js updates to setup some forms teams had to submit. how hard could this be?



3) actions
rereading my code im glad i left comments, i went all out. kinda like i this code would be used for years to come and i was going to sell this little piece of code as a service later on. i even considered the cases when a session could end up starting at the end of the month on one side of the world and ending on the next one across the ocean. i think i had a lot of fun doing this...

so how did i do it?
there were 3 main things i divided my work into

/ displaying info
our audience was as diverse as you can get it not only  spanned from diverse background and cultures but also in age , from highschool students to decorated principal investigtors -
i needed to make things as easy as possible for everyone to reduce friction and make the transition from in person to digital nicer.

i consulted with my team and we came up with 3 displays formats that varied on information levels :

minimal =  overview was just session titles and an icon for session track organized by day and hour
medium =  a table, so you can quickly parse everything by scrolling down, just key info
detailed = a fulllist display , included a longer description and all the information we had available for that session


/ filtering sessions
next steps was letting them navigate the info depending on their interests, in this specific example they could browse the community sessions based on the type (livestream, workshop, interactive, panel, discussion, etc) and the 'track' they belong to , basically the subject matter (governance, career, education, etc)


if i had more time to clean up the code, i would remove inexistent combinations from the filtering system - for example there werent any interactive governance events - and make sure i display a "no sessions available" for days that were empty. i would also request our presenters limit the length of their session titles, some of them break the UI but i didnt realize it until it was too late.



/ switching between timezones

this where the fun was.
the code sorted and organized all session by date and time into the different formats so they were loaded by default.
if the user changed the time zone it would trigger again reloading all the sessions after adjusting the time.

its was hard to wrap my head around adding 60 minutes for an hour so i transformed everything into a "military time" format where and hour would equal a 100. with that logic i consutrcted the main function called change_time_zone(...)

It took in:
1) month, day, time – when the event happens originally
2) duration – how long the event lasts
3) change – the time zone difference in Coordinated Universal Time (UTC)  that the user had selected from the dropdown (i even added a note for our key timezones EST, CET and CST)

with that info it adjusted the start time  and then end time by converting the duration (90 minutes turn into 130 in my conversion system).

when minutes went past 60, it corrected that If the event crosses into the next day it bumps the day forward. If it crosses back a day, it bumps it back.

there are other secondary functions referenced from this one, for example one that has the amount of days in each month to quickly check and few others that fix the formatting from military time back to 12hrs.




 function change_time_zone(month, day, time, duration, change) {
    //maximum amount of days in the month we are in
    var months_days_limit = days_in_a_month(month);

    //time event starts
    var time_start = time + change;

    //convert duration minutes in military format
    if (duration % 60 == 0) {
      duration = (duration / 60) * 100;
    } else if (duration > 60) {
      duration = ((duration / 60) | 0) * 100 + (duration % 60);
    }

    //add converted minutes
    var time_end = time_start + duration;

    //check if time_end needs to be adjusted
    var time_end_minutes = time_end % 100;

    if (time_end_minutes == 60) {
      time_end = time_end - 60 + 100;
    } else if (time_end_minutes > 60) {
      //from those minutes, get how many hours
      var sixty = ((time_end_minutes / 60) | 0) * 100;

      //add hours plus minutes in military format
      time_end_minutes = sixty + ((time_end % 100) - 60);

      //get the final time end by adding the correct minute convertion
      time_end = time_start - (time_start % 100) + time_end_minutes;
    }

    //check if adjusted time change crosses the international date line
    if (time_start >= 2400) {
      time_start = time_start - 2400;
      time_end = time_end - 2400;

      day = day + 1;
    }

    if (time_start < 0) {
      time_start = 2400 - time_start;
      time_end = 2400 - time_end;

      day = day - 1;
    }

    //check if the new day switches months
    if (day > months_days_limit) {
      month = month + 1;
      day = day - months_days_limit;
    }
    if (day <= 0) {
      month = month - 1;
      day = days_in_a_month(month);
    }

    var date_changed = [month, day, time_start, time_end];

    //return changed date
    return date_changed;
  }



how would you have solved the timezone problem?
should we start a mini competition to solve this puzzle?


4) results
the tool went live! and  you can explore it yourself! :D
while we didnt gave the scope to measure usage of the tool and do rounds of improvbement - working at non-profit small team during an "unprecedented time" made it very difficutl - we received alsmot no questions in relation of navigating the schedule.

i can confidently say this was very successful in helping our global audience navigate a suddenly remote conference.



it was also very useful itnernally, the tool was also easily updatedatable for our team
being in event logistics you know things can change minutes before a session starts so we developed a centralized system to update the info
we had an excel that the logistics team could keep up to date as a single source of truth, i added a few formulas to merge the text and format it into a single array that i could copy quickly. it was as smooth as butter.




///conclusionn
im happy writing this.  this was a very nice project, it was one of my last one before leaving igem to pursue my masters degree. im very fond of my time at the foundation, i learned so much and got to improve my skills and see outcomes directly. i smile thinking  how i would hear from comments how much the community loved both the brand and the websites.


while 2020 was challenging anf the years after have also not been a walk in the park. i try to look at the positive side and focus on that silver lining, every challenge is an opporutnity to try something new. it also doenst have to be a life changing new thing, it can a be a piece of code that brings you a smile years down the line, even if it served its purpose for a few months and now lives in your memory shelve. it feels good to remember you did things with heart even if only for yourself.
